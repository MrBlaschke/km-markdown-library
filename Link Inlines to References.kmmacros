<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>IsActive</key>
		<true/>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>7</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Pause</string>
						<key>Seconds</key>
						<real>0.5</real>
						<key>Time</key>
						<string>0.5</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Pasting</string>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteShellScript</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>#!/usr/bin/env ruby

def e_sh(str)
	str.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/n, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
end

def find_headers(lines)
    in_headers = false
    lines.each_with_index {|line, i|
        if line =~ /^\S[^\:]+\:( .*?)?$/
            in_headers = true
        elsif in_headers === true
            return i
        else
            return false
        end
    }
end

input = IO.popen('pbpaste', 'r+').read

links = input.scan(/\((https?:\/\/([^\)]+))\)/)
refs = input.scan(/^\[([^\]]+)\]: (\S+)$/)
lines = input.split("\n")

bottom = lines[0..-1].join("\n").gsub(/^\[([^\]]+)\]: (\S+)\n?/,'')

norepeat = []
norepeatlinks = []
output = []

refs.each {|ref|
	name = ref[0]
	next if norepeatlinks.include? ref[1]
	while norepeat.include? name
		if name =~ / ?[0-9]$/
			name.next!
		else 
			name = name + " 2"
		end
	end
	output &lt;&lt; {'orig' =&gt; ref[0], 'title' =&gt; name, 'link' =&gt; ref[1]}
	norepeat.push name
	norepeatlinks.push ref[1]
}

links.each {|url| 
		next if norepeatlinks.include? url[0]
		domain = url[0].match(/https?:\/\/([^\/]+)/)
		parts = domain[1].split('.')
		name = case parts.length
			when 1: parts[0]
			when 2: parts[0]
			else parts[1]
		end
	while norepeat.include? name
		if name =~ / ?[0-9]$/
			name.next!
		else 
			name = name + " 2"
		end
	end
	output &lt;&lt; {'orig' =&gt; url[0], 'title' =&gt; name, 'link' =&gt; url[0] }
	norepeat.push name
	norepeatlinks.push url[0]
}
output = output.sort {|a,b| a['title'] &lt;=&gt; b['title']}
o = []

output.each_with_index { |x,i| 
	o.push("[#{x['title']}]: #{x['link']}")
	bottom = bottom.gsub(/\((#{e_sh x['orig']}|#{e_sh x['link']})\)/,"[#{x['title']}]").gsub(/\[#{e_sh x['orig']}\]/,"[#{x['title']}]")
}
puts bottom + "\n\n#{o.join("\n")}\n"</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>Variable</string>
					</dict>
					<dict>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>Past</key>
						<integer>0</integer>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
				</array>
				<key>IsActive</key>
				<true/>
				<key>Name</key>
				<string>Link Inlines to References</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>37</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>6144</integer>
						<key>TriggerRepeat</key>
						<false/>
					</dict>
					<dict>
						<key>MacroTriggerType</key>
						<string>StatusMenu</string>
					</dict>
				</array>
				<key>UID</key>
				<string>F16EA0D1-D2E2-4DA6-A833-88B6DAD519B3</string>
			</dict>
		</array>
		<key>Name</key>
		<string>Markdown</string>
		<key>UID</key>
		<string>99EA1468-0BA6-4207-AA91-83620B60BF5E</string>
	</dict>
</array>
</plist>
