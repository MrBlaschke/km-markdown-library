<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>OnceWithPalette</string>
		<key>AddToMacroPalette</key>
		<false/>
		<key>AddToStatusMenu</key>
		<true/>
		<key>IsActive</key>
		<true/>
		<key>KeyCode</key>
		<integer>37</integer>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>Text</key>
						<string>You can place Seth Brown's [formd][1] wherever you want as long as you provide the correct in Execute Shell Script below.

[1]: http://www.drbunsen.org/formd-a-markdown-formatting-tool.html</string>
						<key>Title</key>
						<string>Note: requires external formd tool</string>
					</dict>
					<dict>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>8</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%CurrentClipboard%</string>
						<key>Variable</key>
						<string>MMD__ForMd</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Pasting</string>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<true/>
						<key>MacroActionType</key>
						<string>ExecuteShellScript</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>#!/usr/bin/env python
# encoding=utf8
"""
Seth Brown
02-24-12
"""
from sys import stdin, stdout
import os
import argparse
import re
from collections import OrderedDict

class ForMd(object):
    """Format mardown text"""
    def __init__(self, text):
        super(ForMd, self).__init__()
        self.text = text
        self.match_links = re.compile(r'(\[.*?\])\s?(\[.*?\]|\(.*?\))',
                re.DOTALL | re.MULTILINE)
        self.match_refs = re.compile(r'(?&lt;=\n)\[.*?\]:\s?.*')
        self.data = []

    def _links(self, ):
        """find Markdown links"""
        links = re.findall(self.match_links, self.text)
        for link in links:
            # remove newline breaks from urls spanning multi-lines
            parsed_link = [s.replace('\n','') for s in link]
            yield parsed_link

    def _refs(self):
        """find Markdown references"""
        refs = re.findall(self.match_refs, self.text)
        refs.sort()
        refs = OrderedDict(i.split(":", 1) for i in refs)
        return refs

    def _format(self):
        """process text"""
        links = (i for i in self._links())
        refs = self._refs()
        for n, link in enumerate(links):
            text, ref = link
            ref_num = ''.join(("[",str(n+1),"]: "))
            if ref in refs.keys():
                url = refs.get(ref).strip()
                formd_ref = ''.join((ref_num, url))
                formd_text = ''.join((text, ref_num))
                self.data.append([formd_text, formd_ref])
            elif text in refs.keys():
                url = refs.get(text).strip()
                formd_ref = ''.join((ref_num, url))
                formd_text = ''.join((text, ref_num))
                self.data.append([formd_text, formd_ref])
            elif ref not in refs.keys():
                parse_ref = ref.strip("()")
                formd_ref = ''.join((ref_num, parse_ref))
                formd_text = ''.join((text,ref_num))
                self.data.append([formd_text, formd_ref])

    def inline_md(self):
        """generate inline markdown """
        self._format()
        text_link = iter([''.join((_[0].split("][",1)[0], 
            "](", _[1].split(":",1)[1].strip(), ")")) for _ in self.data])
        formd_text = self.match_links.sub(lambda _: next(text_link), md)
        formd_md = self.match_refs.sub('', formd_text).strip()
        yield formd_md

    def ref_md(self):
        """generate referenced markdown"""
        self._format()
        ref_nums = iter([_[0].rstrip(" :") for _ in self.data])
        formd_text = self.match_links.sub(lambda _: next(ref_nums), md)
        formd_refs = self.match_refs.sub('', formd_text).strip()
        references = (i[1] for i in self.data)
        formd_md = '\n'.join((formd_refs, '\n', '\n'.join(i for i in references)))
        yield formd_md

    def flip(self):
        """convert markdown to the opposite style of the first text link"""
        first_match = re.search(self.match_links, self.text).group(0)
        if '(' and ')' in first_match:
            formd_md = self.ref_md()
        else:
            formd_md = self.inline_md()
        return formd_md

if __name__ == '__main__':
    description = 'formd: A (for)matting (M)ark(d)own tool.' 
    p = argparse.ArgumentParser(description=description)
    p.add_argument('-r', '--ref', 
            help="convert text to referenced Markdown", action='store_true', default=False)
    p.add_argument('-i', '--inline', 
            help="convert text to inline Markdown", action='store_true', default=False)
    p.add_argument('-f', '--flip', 
            help="convert to opposite style Markdown", action='store_true', default=True)
    args = p.parse_args()
    md = os.getenv('KMVAR_MMD__ForMd')
    text = ForMd(md)
    [stdout.write(t) for t in text.flip()]</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<false/>
						<key>TrimResultsNew</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<true/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%Delete%</string>
						<key>Variable</key>
						<string>MMD__ForMd</string>
					</dict>
					<dict>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>1</string>
					</dict>
				</array>
				<key>CustomIconData</key>
				<data>
				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
				IFNUAAJaIEJeIEJjkiIEJqIFN6IKICAADwEAAAMAAAAB
				AEAAAAEBAAMAAAABAEAAAAECAAMAAAAEAAAQ7gEDAAMA
				AAABAAUAAAEGAAMAAAABAAIAAAERAAQAAAABAAAACAES
				AAMAAAABAAEAAAEVAAMAAAABAAQAAAEWAAMAAAABAEAA
				AAEXAAQAAAABAAAQLAEcAAMAAAABAAEAAAE9AAMAAAAB
				AAIAAAFSAAMAAAABAAEAAAFTAAMAAAAEAAAQ9odzAAcA
				AAeoAAAQ/gAAHKIACAAIAAgACAABAAEAAQABAAAHqGFw
				cGwCIAAAbW50clJHQiBYWVogB9kAAgAZAAsAGgALYWNz
				cEFQUEwAAAAAYXBwbAAAAAAAAAAAAAAAAAAAAAAAAPbW
				AAEAAAAA0y1hcHBsAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALZGVzYwAA
				AQgAAABvZHNjbQAAAXgAAAVsY3BydAAABuQAAAA4d3Rw
				dAAABxwAAAAUclhZWgAABzAAAAAUZ1hZWgAAB0QAAAAU
				YlhZWgAAB1gAAAAUclRSQwAAB2wAAAAOY2hhZAAAB3wA
				AAAsYlRSQwAAB2wAAAAOZ1RSQwAAB2wAAAAOZGVzYwAA
				AAAAAAAUR2VuZXJpYyBSR0IgUHJvZmlsZQAAAAAAAAAA
				AAAAFEdlbmVyaWMgUkdCIFByb2ZpbGUAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAG1sdWMAAAAAAAAAHgAAAAxza1NLAAAAKAAA
				AXhockhSAAAAKAAAAaBjYUVTAAAAJAAAAchwdEJSAAAA
				JgAAAex1a1VBAAAAKgAAAhJmckZVAAAAKAAAAjx6aFRX
				AAAAFgAAAmRpdElUAAAAKAAAAnpuYk5PAAAAJgAAAqJr
				b0tSAAAAFgAAAshjc0NaAAAAIgAAAt5oZUlMAAAAHgAA
				AwBkZURFAAAALAAAAx5odUhVAAAAKAAAA0pzdlNFAAAA
				JgAAAqJ6aENOAAAAFgAAA3JqYUpQAAAAGgAAA4hyb1JP
				AAAAJAAAA6JlbEdSAAAAIgAAA8ZwdFBPAAAAJgAAA+hu
				bE5MAAAAKAAABA5lc0VTAAAAJgAAA+h0aFRIAAAAJAAA
				BDZ0clRSAAAAIgAABFpmaUZJAAAAKAAABHxwbFBMAAAA
				LAAABKRydVJVAAAAIgAABNBhckVHAAAAJgAABPJlblVT
				AAAAJgAABRhkYURLAAAALgAABT4AVgFhAGUAbwBiAGUA
				YwBuAP0AIABSAEcAQgAgAHAAcgBvAGYAaQBsAEcAZQBu
				AGUAcgBpAQ0AawBpACAAUgBHAEIAIABwAHIAbwBmAGkA
				bABQAGUAcgBmAGkAbAAgAFIARwBCACAAZwBlAG4A6ABy
				AGkAYwBQAGUAcgBmAGkAbAAgAFIARwBCACAARwBlAG4A
				6QByAGkAYwBvBBcEMAQzBDAEOwRMBD0EOAQ5ACAEPwRA
				BD4ERAQwBDkEOwAgAFIARwBCAFAAcgBvAGYAaQBsACAA
				ZwDpAG4A6QByAGkAcQB1AGUAIABSAFYAQpAadSgAIABS
				AEcAQgAggnJfaWPPj/AAUAByAG8AZgBpAGwAbwAgAFIA
				RwBCACAAZwBlAG4AZQByAGkAYwBvAEcAZQBuAGUAcgBp
				AHMAawAgAFIARwBCAC0AcAByAG8AZgBpAGzHfLwYACAA
				UgBHAEIAINUEuFzTDMd8AE8AYgBlAGMAbgD9ACAAUgBH
				AEIAIABwAHIAbwBmAGkAbAXkBegF1QXkBdkF3AAgAFIA
				RwBCACAF2wXcBdwF2QBBAGwAbABnAGUAbQBlAGkAbgBl
				AHMAIABSAEcAQgAtAFAAcgBvAGYAaQBsAMEAbAB0AGEA
				bADhAG4AbwBzACAAUgBHAEIAIABwAHIAbwBmAGkAbGZu
				kBoAIABSAEcAQgAgY8+P8GWHTvZOAIIsACAAUgBHAEIA
				IDDXMO0w1TChMKQw6wBQAHIAbwBmAGkAbAAgAFIARwBC
				ACAAZwBlAG4AZQByAGkAYwOTA7UDvQO5A7oDzAAgA8AD
				wQO/A8YDrwO7ACAAUgBHAEIAUABlAHIAZgBpAGwAIABS
				AEcAQgAgAGcAZQBuAOkAcgBpAGMAbwBBAGwAZwBlAG0A
				ZQBlAG4AIABSAEcAQgAtAHAAcgBvAGYAaQBlAGwOQg4b
				DiMORA4fDiUOTAAgAFIARwBCACAOFw4xDkgOJw5EDhsA
				RwBlAG4AZQBsACAAUgBHAEIAIABQAHIAbwBmAGkAbABp
				AFkAbABlAGkAbgBlAG4AIABSAEcAQgAtAHAAcgBvAGYA
				aQBpAGwAaQBVAG4AaQB3AGUAcgBzAGEAbABuAHkAIABw
				AHIAbwBmAGkAbAAgAFIARwBCBB4EMQRJBDgEOQAgBD8E
				QAQ+BEQEOAQ7BEwAIABSAEcAQgZFBkQGQQAgBioGOQYx
				BkoGQQAgAFIARwBCACAGJwZEBjkGJwZFAEcAZQBuAGUA
				cgBpAGMAIABSAEcAQgAgAFAAcgBvAGYAaQBsAGUARwBl
				AG4AZQByAGUAbAAgAFIARwBCAC0AYgBlAHMAawByAGkA
				dgBlAGwAcwBldGV4dAAAAABDb3B5cmlnaHQgMjAwNyBB
				cHBsZSBJbmMuLCBhbGwgcmlnaHRzIHJlc2VydmVkLgBY
				WVogAAAAAAAA81IAAQAAAAEWz1hZWiAAAAAAAAB0TQAA
				Pe4AAAPQWFlaIAAAAAAAAFp1AACscwAAFzRYWVogAAAA
				AAAAKBoAABWfAAC4NmN1cnYAAAAAAAAAAQHNAABzZjMy
				AAAAAAABDEIAAAXe///zJgAAB5IAAP2R///7ov///aMA
				AAPcAADAbIAAIFA4IAB7AzrAxpAwzBYdD4hEYlE4pFYc
				54GzIGi4Gw4me4GgoGAotJZNJ5RKYI/oGfoGhYHB4EwJ
				HKptN5xOQBLIEQIGsoGTZ1Q6JRYqs4G5oZRqZTaNGIE/
				6dU6pRalVaxWZRV61Xa9EK5X7FX7DY7NWLLZ7VTbTa7d
				Q7aAACHzMAF4tTyABEC4IBQABHsxQAWhWWAAAzqoAApD
				0VAAEQA5AAnjuWQAbU0zgAZ0mvAAeCYI4G+gA3F4nQAd
				jKigANlCyAAbA4xgALSGcgAJTImwAtDqJwAjCopAAWFO
				c70CwMAHy72sAE6fKEi1tPIlcQMOkaAHexSkAEwb0gAH
				SCAPAnzGFayxgAGkxdwzEeZwApgKaPBstSIQwAAmVx5g
				ALZzkiABBmABwAD0RQ1gAdhDp8XgglsAA7hwb4ACUAIW
				gAD5dnyABLiIvxDCeRwADqWLcF0P44AAcIejoAA1CIBg
				AEMHwKAAPZhn6sCIOy7Z0l6GoABmBIfAAbyHiAQhmgAX
				wwmqAABA2LyBhkABhnrJ57jyGYAGcMDPCIXAiAAGg9M0
				OJgnrAwBEC4J/DwAA/h884/BAF0Olya4ADGE83EMJxLg
				AOBZDeABHhiBoAD4aCWEgaapDIeBAAABgezih7sB2Qzy
				GJRJvGHJ56gNGx5GaTDgne+haCWYNMBi3CCECZB3AAKJ
				mi4ABbBk4g2AazRaG25YjiZDhcDWhZsi2Y86h8vhakNA
				oHi0ywTguvhRCuTgADTREQh9BI6R6AAqk0bAAE+HcKAY
				FdaIc7DtPIYorgAWRDFEAB2gSBAAHgcTPGGDhBgAWYk1
				jd94hEABYnUboABCUgl16HLiDCAJdgAagNisAAeHMQ4A
				AOG49AARBkHGAArAKeK5Akvh8nSaAAHiEQdgAZQx28MV
				wkvcYAXLHw0FdlZIhOVeSXhH6HyC8heZyJwFBzLQALKE
				o2lqABtEkF4ADcEIPRCB8ZHMaBCAAV4lAS7hCnWAEyzP
				NMznef5EgAXAuhJF45WeIpmFiAAOjKMgAHQSlLnWLsGm
				sLue5/oJMA9VZolJwxjDuH4ACKRRhaahwBha7ZzmVnIv
				gTqpb6uh+GkeYLYDgHwKoKbJVDuAAUCu1mUnVuJjDBNA
				5QoLxM3UUIr4iSRvSKF5YD4AB+jiR4AHGMUrg6T9CmeL
				xKAALxYzj2iCHsuxLPwIo1lGii4qKEQRSyB4AmeABnm7
				9q3pv/H8/4k39v9gARN/8AYCLygLAci0A4EQFgVAuAMD
				YHP9KUQIhsEYDlQXwUGC0BykECJkAAmhAiSQbLWdYnxD
				iQECJFCKEhXTrEuIETAiUHyEkCIXBSFpN4MEaIERwgRH
				iBkBAAAPAQAAAwAAAAEAIAAAAQEAAwAAAAEAIAAAAQIA
				AwAAAAQAAB1cAQMAAwAAAAEABQAAAQYAAwAAAAEAAgAA
				AREABAAAAAEAABimARIAAwAAAAEAAQAAARUAAwAAAAEA
				BAAAARYAAwAAAAEAIAAAARcABAAAAAEAAAP7ARwAAwAA
				AAEAAQAAAT0AAwAAAAEAAgAAAVIAAwAAAAEAAQAAAVMA
				AwAAAAQAAB1kh3MABwAAB6gAAB1sAAAmtAAIAAgACAAI
				AAEAAQABAAEAAAeoYXBwbAIgAABtbnRyUkdCIFhZWiAH
				2QACABkACwAaAAthY3NwQVBQTAAAAABhcHBsAAAAAAAA
				AAAAAAAAAAAAAAAA9tYAAQAAAADTLWFwcGwAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAtkZXNjAAABCAAAAG9kc2NtAAABeAAABWxj
				cHJ0AAAG5AAAADh3dHB0AAAHHAAAABRyWFlaAAAHMAAA
				ABRnWFlaAAAHRAAAABRiWFlaAAAHWAAAABRyVFJDAAAH
				bAAAAA5jaGFkAAAHfAAAACxiVFJDAAAHbAAAAA5nVFJD
				AAAHbAAAAA5kZXNjAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAUR2VuZXJpYyBSR0IgUHJv
				ZmlsZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAbWx1YwAAAAAAAAAe
				AAAADHNrU0sAAAAoAAABeGhySFIAAAAoAAABoGNhRVMA
				AAAkAAAByHB0QlIAAAAmAAAB7HVrVUEAAAAqAAACEmZy
				RlUAAAAoAAACPHpoVFcAAAAWAAACZGl0SVQAAAAoAAAC
				em5iTk8AAAAmAAAComtvS1IAAAAWAAACyGNzQ1oAAAAi
				AAAC3mhlSUwAAAAeAAADAGRlREUAAAAsAAADHmh1SFUA
				AAAoAAADSnN2U0UAAAAmAAAConpoQ04AAAAWAAADcmph
				SlAAAAAaAAADiHJvUk8AAAAkAAADomVsR1IAAAAiAAAD
				xnB0UE8AAAAmAAAD6G5sTkwAAAAoAAAEDmVzRVMAAAAm
				AAAD6HRoVEgAAAAkAAAENnRyVFIAAAAiAAAEWmZpRkkA
				AAAoAAAEfHBsUEwAAAAsAAAEpHJ1UlUAAAAiAAAE0GFy
				RUcAAAAmAAAE8mVuVVMAAAAmAAAFGGRhREsAAAAuAAAF
				PgBWAWEAZQBvAGIAZQBjAG4A/QAgAFIARwBCACAAcABy
				AG8AZgBpAGwARwBlAG4AZQByAGkBDQBrAGkAIABSAEcA
				QgAgAHAAcgBvAGYAaQBsAFAAZQByAGYAaQBsACAAUgBH
				AEIAIABnAGUAbgDoAHIAaQBjAFAAZQByAGYAaQBsACAA
				UgBHAEIAIABHAGUAbgDpAHIAaQBjAG8EFwQwBDMEMAQ7
				BEwEPQQ4BDkAIAQ/BEAEPgREBDAEOQQ7ACAAUgBHAEIA
				UAByAG8AZgBpAGwAIABnAOkAbgDpAHIAaQBxAHUAZQAg
				AFIAVgBCkBp1KAAgAFIARwBCACCCcl9pY8+P8ABQAHIA
				bwBmAGkAbABvACAAUgBHAEIAIABnAGUAbgBlAHIAaQBj
				AG8ARwBlAG4AZQByAGkAcwBrACAAUgBHAEIALQBwAHIA
				bwBmAGkAbMd8vBgAIABSAEcAQgAg1QS4XNMMx3wATwBi
				AGUAYwBuAP0AIABSAEcAQgAgAHAAcgBvAGYAaQBsBeQF
				6AXVBeQF2QXcACAAUgBHAEIAIAXbBdwF3AXZAEEAbABs
				AGcAZQBtAGUAaQBuAGUAcwAgAFIARwBCAC0AUAByAG8A
				ZgBpAGwAwQBsAHQAYQBsAOEAbgBvAHMAIABSAEcAQgAg
				AHAAcgBvAGYAaQBsZm6QGgAgAFIARwBCACBjz4/wZYdO
				9k4AgiwAIABSAEcAQgAgMNcw7TDVMKEwpDDrAFAAcgBv
				AGYAaQBsACAAUgBHAEIAIABnAGUAbgBlAHIAaQBjA5MD
				tQO9A7kDugPMACADwAPBA78DxgOvA7sAIABSAEcAQgBQ
				AGUAcgBmAGkAbAAgAFIARwBCACAAZwBlAG4A6QByAGkA
				YwBvAEEAbABnAGUAbQBlAGUAbgAgAFIARwBCAC0AcABy
				AG8AZgBpAGUAbA5CDhsOIw5EDh8OJQ5MACAAUgBHAEIA
				IA4XDjEOSA4nDkQOGwBHAGUAbgBlAGwAIABSAEcAQgAg
				AFAAcgBvAGYAaQBsAGkAWQBsAGUAaQBuAGUAbgAgAFIA
				RwBCAC0AcAByAG8AZgBpAGkAbABpAFUAbgBpAHcAZQBy
				AHMAYQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAUgBHAEIE
				HgQxBEkEOAQ5ACAEPwRABD4ERAQ4BDsETAAgAFIARwBC
				BkUGRAZBACAGKgY5BjEGSgZBACAAUgBHAEIAIAYnBkQG
				OQYnBkUARwBlAG4AZQByAGkAYwAgAFIARwBCACAAUABy
				AG8AZgBpAGwAZQBHAGUAbgBlAHIAZQBsACAAUgBHAEIA
				LQBiAGUAcwBrAHIAaQB2AGUAbABzAGV0ZXh0AAAAAENv
				cHlyaWdodCAyMDA3IEFwcGxlIEluYy4sIGFsbCByaWdo
				dHMgcmVzZXJ2ZWQuAFhZWiAAAAAAAADzUgABAAAAARbP
				WFlaIAAAAAAAAHRNAAA97gAAA9BYWVogAAAAAAAAWnUA
				AKxzAAAXNFhZWiAAAAAAAAAoGgAAFZ8AALg2Y3VydgAA
				AAAAAAABAc0AAHNmMzIAAAAAAAEMQgAABd7///MmAAAH
				kgAA/ZH///ui///9owAAA9wAAMBsgAAgQCgQAOcFPUFC
				EFhkNh0PiEOeEFQ0FRsFOsFREFgkRj0fkEMf0FPEFeMF
				B0hlUrkLygr/lkxmUgmEzm03gU1gQHBAJAAFAkEez0eo
				ABAKBQAe1LAAEA8+AoAfYAe75fkDAIArMEAtdAADANXe
				74q8PmANDgAQKEQdNdjVADTbEuJpWIoAZCyUIACQsIQA
				DAForpej5ADXaNwDwvJgAFwMggGC1FTCNQ4AX7PcsMf4
				DCgmACOR1tYyxUoAFBFJ4AVKQSEGPRuAATBcCc7ue4AD
				gpEgABjjewAA4hFtfabBACCU6dABEJ5JgxvQGcAQVFAA
				SaHPgAV6hSoAFpRMAAcS+XAAJZVIG+BYPqjqkbyBFFKh
				Axrjcrpprkb4AUBkF+wAIAMAA9ECSjOACBQJAAFgPgyu
				JrrgCwNhSAAsCeHgAGIYZgKkf6CHieyshWFgRKkeJ6Kk
				fJ+gA9oIgAB4IwIXxdl4AB0nalyXpxHqZJ1H0go/IEhS
				KhyToElMjSFHYAIygSNoHJaZJGgSSykgSDoEhKBIXKaI
				ImgSKoERqAgADwEAAAMAAAABABAAAAEBAAMAAAABABAA
				AAECAAMAAAAEAAAnbgEDAAMAAAABAAUAAAEGAAMAAAAB
				AAIAAAERAAQAAAABAAAlFAESAAMAAAABAAEAAAEVAAMA
				AAABAAQAAAEWAAMAAAABABAAAAEXAAQAAAABAAABoAEc
				AAMAAAABAAEAAAE9AAMAAAABAAIAAAFSAAMAAAABAAEA
				AAFTAAMAAAAEAAAndodzAAcAAAeoAAAnfgAAAAAACAAI
				AAgACAABAAEAAQABAAAHqGFwcGwCIAAAbW50clJHQiBY
				WVogB9kAAgAZAAsAGgALYWNzcEFQUEwAAAAAYXBwbAAA
				AAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1hcHBsAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAALZGVzYwAAAQgAAABvZHNjbQAAAXgA
				AAVsY3BydAAABuQAAAA4d3RwdAAABxwAAAAUclhZWgAA
				BzAAAAAUZ1hZWgAAB0QAAAAUYlhZWgAAB1gAAAAUclRS
				QwAAB2wAAAAOY2hhZAAAB3wAAAAsYlRSQwAAB2wAAAAO
				Z1RSQwAAB2wAAAAOZGVzYwAAAAAAAAAUR2VuZXJpYyBS
				R0IgUHJvZmlsZQAAAAAAAAAAAAAAFEdlbmVyaWMgUkdC
				IFByb2ZpbGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG1sdWMAAAAA
				AAAAHgAAAAxza1NLAAAAKAAAAXhockhSAAAAKAAAAaBj
				YUVTAAAAJAAAAchwdEJSAAAAJgAAAex1a1VBAAAAKgAA
				AhJmckZVAAAAKAAAAjx6aFRXAAAAFgAAAmRpdElUAAAA
				KAAAAnpuYk5PAAAAJgAAAqJrb0tSAAAAFgAAAshjc0Na
				AAAAIgAAAt5oZUlMAAAAHgAAAwBkZURFAAAALAAAAx5o
				dUhVAAAAKAAAA0pzdlNFAAAAJgAAAqJ6aENOAAAAFgAA
				A3JqYUpQAAAAGgAAA4hyb1JPAAAAJAAAA6JlbEdSAAAA
				IgAAA8ZwdFBPAAAAJgAAA+hubE5MAAAAKAAABA5lc0VT
				AAAAJgAAA+h0aFRIAAAAJAAABDZ0clRSAAAAIgAABFpm
				aUZJAAAAKAAABHxwbFBMAAAALAAABKRydVJVAAAAIgAA
				BNBhckVHAAAAJgAABPJlblVTAAAAJgAABRhkYURLAAAA
				LgAABT4AVgFhAGUAbwBiAGUAYwBuAP0AIABSAEcAQgAg
				AHAAcgBvAGYAaQBsAEcAZQBuAGUAcgBpAQ0AawBpACAA
				UgBHAEIAIABwAHIAbwBmAGkAbABQAGUAcgBmAGkAbAAg
				AFIARwBCACAAZwBlAG4A6AByAGkAYwBQAGUAcgBmAGkA
				bAAgAFIARwBCACAARwBlAG4A6QByAGkAYwBvBBcEMAQz
				BDAEOwRMBD0EOAQ5ACAEPwRABD4ERAQwBDkEOwAgAFIA
				RwBCAFAAcgBvAGYAaQBsACAAZwDpAG4A6QByAGkAcQB1
				AGUAIABSAFYAQpAadSgAIABSAEcAQgAggnJfaWPPj/AA
				UAByAG8AZgBpAGwAbwAgAFIARwBCACAAZwBlAG4AZQBy
				AGkAYwBvAEcAZQBuAGUAcgBpAHMAawAgAFIARwBCAC0A
				cAByAG8AZgBpAGzHfLwYACAAUgBHAEIAINUEuFzTDMd8
				AE8AYgBlAGMAbgD9ACAAUgBHAEIAIABwAHIAbwBmAGkA
				bAXkBegF1QXkBdkF3AAgAFIARwBCACAF2wXcBdwF2QBB
				AGwAbABnAGUAbQBlAGkAbgBlAHMAIABSAEcAQgAtAFAA
				cgBvAGYAaQBsAMEAbAB0AGEAbADhAG4AbwBzACAAUgBH
				AEIAIABwAHIAbwBmAGkAbGZukBoAIABSAEcAQgAgY8+P
				8GWHTvZOAIIsACAAUgBHAEIAIDDXMO0w1TChMKQw6wBQ
				AHIAbwBmAGkAbAAgAFIARwBCACAAZwBlAG4AZQByAGkA
				YwOTA7UDvQO5A7oDzAAgA8ADwQO/A8YDrwO7ACAAUgBH
				AEIAUABlAHIAZgBpAGwAIABSAEcAQgAgAGcAZQBuAOkA
				cgBpAGMAbwBBAGwAZwBlAG0AZQBlAG4AIABSAEcAQgAt
				AHAAcgBvAGYAaQBlAGwOQg4bDiMORA4fDiUOTAAgAFIA
				RwBCACAOFw4xDkgOJw5EDhsARwBlAG4AZQBsACAAUgBH
				AEIAIABQAHIAbwBmAGkAbABpAFkAbABlAGkAbgBlAG4A
				IABSAEcAQgAtAHAAcgBvAGYAaQBpAGwAaQBVAG4AaQB3
				AGUAcgBzAGEAbABuAHkAIABwAHIAbwBmAGkAbAAgAFIA
				RwBCBB4EMQRJBDgEOQAgBD8EQAQ+BEQEOAQ7BEwAIABS
				AEcAQgZFBkQGQQAgBioGOQYxBkoGQQAgAFIARwBCACAG
				JwZEBjkGJwZFAEcAZQBuAGUAcgBpAGMAIABSAEcAQgAg
				AFAAcgBvAGYAaQBsAGUARwBlAG4AZQByAGUAbAAgAFIA
				RwBCAC0AYgBlAHMAawByAGkAdgBlAGwAcwBldGV4dAAA
				AABDb3B5cmlnaHQgMjAwNyBBcHBsZSBJbmMuLCBhbGwg
				cmlnaHRzIHJlc2VydmVkLgBYWVogAAAAAAAA81IAAQAA
				AAEWz1hZWiAAAAAAAAB0TQAAPe4AAAPQWFlaIAAAAAAA
				AFp1AACscwAAFzRYWVogAAAAAAAAKBoAABWfAAC4NmN1
				cnYAAAAAAAAAAQHNAABzZjMyAAAAAAABDEIAAAXe///z
				JgAAB5IAAP2R///7ov///aMAAAPcAADAbA==
				</data>
				<key>IsActive</key>
				<true/>
				<key>ModificationDate</key>
				<real>413462906.11593801</real>
				<key>Name</key>
				<string>3: Flip Link Style (ForMd)</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>20</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>0</integer>
					</dict>
					<dict>
						<key>MacroTriggerType</key>
						<string>StatusMenu</string>
					</dict>
				</array>
				<key>UID</key>
				<string>32068494-3FC3-4F56-BDDA-2DD785B86EAF</string>
			</dict>
		</array>
		<key>Modifiers</key>
		<integer>6144</integer>
		<key>Name</key>
		<string>Markdown Link</string>
		<key>UID</key>
		<string>C6199C1B-FC8A-44FF-9407-3FBFE9F72CF0</string>
	</dict>
</array>
</plist>
